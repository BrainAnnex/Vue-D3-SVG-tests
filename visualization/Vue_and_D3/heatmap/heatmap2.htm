<!-- Simple heatmap purely with D3
     Based on heatmap1.htm, but with a hardwired small data set.
     Vue is set up but not used.
-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Heatmap 2 : Vue with SVG</title>

    <!-- JavaScript -->
    <script src="../Vue2/vue2.js"></script>    <!-- Vue.js (version 2.6) -->

</head>

<body>


<div id="vue-root">   <!-- Container for VUE COMPONENT below : ROOT element -->

    Vue root element - the Vue "scaffold" is in place, but Vue is NOT used for now<br>

</div>	<!--  ~~~~~~~~~~~~~~~~~~~~~  END of Vue root element  ~~~~~~~~~~~~~~~~~~~~~  -->


<br>
<hr>

<!--
    Vue components (and other JS).  This must appear AFTER the Vue-containing elements
  -->
<script src="https://d3js.org/d3.v7.min.js"></script>



<script>
// Instantiation of the ROOT component must come after the definition of the descendant components
new Vue({
    el: '#vue-root',

    data: {

    }

});
</script>



<!-- Create a div where the graph will be inserted -->
<div id="my_dataviz">

</div>


<script>
    // Labels of row and columns
    const myGroups = ["A", "B", "C"];
    const myVars = ["v1", "v2"];

    // Data for the heatmap
    const MY_DATA = [
        { group: "A", variable: "v1", value: "30" },
        { group: "A", variable: "v2", value: "95" },
        { group: "B", variable: "v1", value: "37" },
        { group: "B", variable: "v2", value: "50" },
        { group: "C", variable: "v1", value: "96" },
        { group: "C", variable: "v2", value: "13" }
    ];


    // set the dimensions and margins of the graph
    const margins = {top: 30, right: 30, bottom: 30, left: 30};


    const width = 450 - margins.left - margins.right,
          height = 450 - margins.top - margins.bottom;


    // append the svg object to the body of the page
    const svg = d3.select("#my_dataviz")
            .append("svg")
                .attr("width", width + margins.left + margins.right)
                .attr("height", height + margins.top + margins.bottom)
            .append("g")
                .attr("transform", `translate(${margins.left},${margins.top})`);


    // Build X scale and axis
    const x = d3.scaleBand()
            .range([ 0, width ])
            .domain(myGroups);

    svg.append("g")
        .attr("transform", `translate(0, ${height})`)
        .call(d3.axisBottom(x));

    // Build Y scale and axis
    const y = d3.scaleBand()
      .range([ height, 0 ])
      .domain(myVars);

    svg.append("g")
      .call(d3.axisLeft(y));

    // Build color scale
    const myColor = d3.scaleLinear()
      .range(["white", "#69b3a2"])
      .domain([1,100]);


    // Transform the DOM element with the SVG
    svg.selectAll()
            .data(MY_DATA, function(d) {return d.group+':'+d.variable;})
            .join("rect")
            .attr("x", function(d) { return x(d.group) })
            .attr("y", function(d) { return y(d.variable) })
            .attr("width", x.bandwidth() )
            .attr("height", y.bandwidth() )
            .style("fill", function(d) { return myColor(d.value)} );


</script>

</body>
</html>